# docs.ansible.com/ansible/intro_configuration.html

[defaults]
# This is the default location of the inventory file, script, or directory that Ansible will use to determine what hosts it has available to talk to:
# http://docs.ansible.com/ansible/intro_configuration.html#id96
inventory=./inventory

# The roles path indicate additional directories beyond the ‘roles/’ subdirectory of a playbook project to search to find Ansible roles.
# Additional paths can be provided separated by colon characters, in the same way as other pathstrings
# Roles will be first searched for in the playbook directory. Should a role not be found, it will indicate all the possible paths that were searched.
# http://docs.ansible.com/ansible/intro_configuration.html#id115
roles_path=./playbooks/roles.galaxy

# Actions are pieces of code in ansible that enable things like module execution, templating, and so forth.
# http://docs.ansible.com/ansible/intro_configuration.html#id72
action_plugins=./action_plugins

# Callbacks are pieces of code in ansible that get called on specific events, permitting to trigger notifications.
# http://docs.ansible.com/ansible/intro_configuration.html#id78
callback_plugins =./callback_plugins
# callback_plugins =./callback_plugins:./lib/python2.7/site-packages/ara/callback
# callback_whitelist = ara, actionable, profile_task
callback_whitelist = actionable, profile_task

# When Ansible gets ready to send a module to a remote machine it usually has to add a few things to the module: Some boilerplate code, the module’s parameters, and a few constants from the config file. This combination of things gets stored in a temporary file until ansible exits and cleans up after itself. The default location is a subdirectory of the user’s home directory.
# http://docs.ansible.com/ansible/intro_configuration.html#id99
local_tmp=./tmp/ansible

# If present and configured in ansible.cfg, Ansible will log information about executions at the designated location. Be sure the user running Ansible has permissions on the logfile.
# This behavior is not on by default. Note that ansible will, without this setting, record module arguments called to the syslog of managed machines. Password arguments are excluded.
# http://docs.ansible.com/ansible/intro_configuration.html#id100
log_path=./log/ansible.log

# The retry files save path is where Ansible will save .retry files when a playbook fails and retry_files_enabled is True (the default). The default location is adjacent to the play (~/ in versions older than 2.0) and can be changed to any writeable path:
# http://docs.ansible.com/ansible/intro_configuration.html#id114
retry_files_save_path=./tmp/ansible

# By default, ansible-playbook will print a header for each task that is run to stdout. These headers will contain the name: field from the task if you specified one. If you didn’t then ansible-playbook uses the task’s action to help you tell which task is presently running. Sometimes you run many of the same action and so you want more information about the task to differentiate it from others of the same action. If you set this variable to True in the config then ansible-playbook will also include the task’s arguments in the header.
# http://docs.ansible.com/ansible/intro_configuration.html#id84
# display_args_to_stdout=True

# This is the default number of parallel processes to spawn when communicating with remote hosts. Since Ansible 1.3, the fork number is automatically limited to the number of possible hosts, so this is really a limit of how much network and CPU load you think you can handle. Many users may set this to 50, some set it to 500 or more. If you have a large number of hosts, higher values will make actions across all of those hosts complete faster.
# http://docs.ansible.com/ansible/intro_configuration.html#id91
forks=4

# SSH timeout to use on connection attempts
# http://docs.ansible.com/ansible/intro_configuration.html#id122
timeout=20

# For asynchronous tasks in Ansible (covered in Asynchronous Actions and Polling), this is how often to check back on the status of those tasks when an explicit poll interval is not supplied. The default is a reasonably moderate 15 seconds which is a tradeoff between checking in frequently and providing a quick turnaround when something may have completed.
# http://docs.ansible.com/ansible/intro_configuration.html#id108
poll_interval=5

# By default since Ansible 1.8, Ansible will warn when usage of the shell and command module appear to be simplified by using a default Ansible module instead. This can include reminders to use the ‘git’ module instead of shell commands to execute ‘git’. Using modules when possible over arbitrary shell commands can lead to more reliable and consistent playbook runs, and also easier to maintain playbooks.
# http://docs.ansible.com/ansible/intro_configuration.html#id81
command_warnings=True

# If set to False, ansible will not display any status for a task that is skipped.
# Note that Ansible will always show the task header for any task, regardless of whether or not the task is skipped.
# http://docs.ansible.com/ansible/intro_configuration.html#id85
display_skipped_hosts=True

# This options forces color mode even when running without a TTY
# http://docs.ansible.com/ansible/intro_configuration.html#id89
# force_color=1

# This is to set the default language to communicate between the module and the system.
# By default, the value is ‘C’.
# http://docs.ansible.com/ansible/intro_configuration.html#id103
module_lang=en_US.UTF-8

# The value ‘implicit’ is the default, which means that the fact cache will be ignored and facts will be gathered per play unless ‘gather_facts: False’ is set. The value ‘explicit’ is the inverse, facts will not be gathered unless directly requested in the play. The value ‘smart’ means each new host that has no facts discovered will be scanned, but if the same host is addressed in multiple plays it will not be contacted again in the playbook run. This option can be useful for those wishing to save fact gathering time. Both ‘smart’ and ‘explicit’ will use the fact cache.
# http://docs.ansible.com/ansible/intro_configuration.html#id92
gaterhing=smart

# You can specify a subset of gathered facts using the following option.
# You can combine them using a comma separated list (ex: network,virtual,facter).
# You can also disable specific subsets by prepending with a ! like this.
gather_subset=!ohai,!facter

# With “Fact Caching” disabled, in order to do this, Ansible must have already talked to ‘asdf.example.com’ in the current play, or another play up higher in the playbook. This is the default configuration of ansible.
# To avoid this, Ansible 1.8 allows the ability to save facts between playbook runs, but this feature must be manually enabled. Why might this be useful?
# Imagine, for instance, a very large infrastructure with thousands of hosts. Fact caching could be configured to run nightly, but configuration of a small set of servers could run ad-hoc or periodically throughout the day. With fact-caching enabled, it would not be necessary to “hit” all servers to reference variables and information about them.
# With fact caching enabled, it is possible for machine in one group to reference variables about machines in the other group, despite the fact that they have not been communicated with in the current execution of /usr/bin/ansible-playbook.
# To benefit from cached facts, you will want to change the gathering setting to smart or explicit or set gather_facts to False in most plays.
# Currently, Ansible ships with two persistent cache plugins: redis and jsonfile.
# http://docs.ansible.com/ansible/playbooks_variables.html#fact-caching
#fact_caching=memory
fact_caching=jsonfile
fact_caching_connection=./tmp/ansible
fact_caching_timeout=600

ansible_managed=This file is managed by Taxigirl using Ansible.%n
  user: {uid}@{host}
  template: {file}
  date: %d-%m-%Y %H:%M:%S

[ssh_connection]
# Enabling pipelining reduces the number of SSH operations required to execute a module on the remote server, by executing many ansible modules without actual file transfer. This can result in a very significant performance improvement when enabled, however when using “sudo:” operations you must first disable ‘requiretty’ in /etc/sudoers on all managed hosts.
# http://docs.ansible.com/ansible/intro_configuration.html#id139
pipelining=True
ssh_args=-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=300s

# This is the location to save ControlPath sockets.
# On some systems with very long hostnames or very long path names (caused by long user names or deeply nested home directories) this can exceed the character limit on file socket names (108 characters for most platforms).
# http://docs.ansible.com/ansible/intro_configuration.html#id137
control_path=./tmp/.ansible-ssh-%%h-%%p-%%r
