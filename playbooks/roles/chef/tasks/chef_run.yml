-   name: Assert on 'chef.run'
    assert:
        that: (chef.run is defined and chef.run is not none and chef.run | trim != '')
    tags:
    - chef
    - chef_run
    - chef_assert_run
-   name: Assert on 'chef.run_list'
    assert:
        that: (chef.run_list is defined and chef.run_list is not none and chef.run_list | trim != '')
    tags:
    - chef
    - chef_run
    - chef_assert_runlist
-   name: Run Chef (Zero)
    command: chef-client --no-fork --audit-mode "{{ chef.audit_mode|default('enabled') }}" -c "{{ chef.config_dir|default('/etc/chef') }}"/client.rb -o "{{ chef.run_list }}"
    args:
        chdir: "{{ chdir }}"
    become: "{{ chef.with_sudo|default(omit) }}"
    register: chef_run
    when: (chef.run is defined and chef.run == 'zero')
    tags:
    - chef
    - chef_zero
    - chef_run
    - chef_run_zero
-   name: Run Chef (Solo)
    command: chef-solo --no-fork -c "{{ chef.config_dir|default('/etc/chef') }}"/solo.rb -o "{{ chef.run_list }}"
    args:
        chdir: "{{ chdir }}"
    become: "{{ chef.with_sudo|default(omit) }}"
    register: chef_run
    when: (chef.run is defined and chef.run == 'solo')
    tags:
    - chef
    - chef_solo
    - chef_run
    - chef_run_solo
-   name: Notification
    slack:
        token: "{{ slack.token }}"
        msg: Chef Run done
        username: "Taxigirl on {{ inventory_hostname }}"
        # attachments:
        # -   title: Host
        #     text: "{{ ansible_fqdn }}"
        #     color: good
        #     fields:
        #     -   title: Log
        #         value: "{{ lookup('file', chef.log_location)|default('') }}"
        #         short: no
    when: (slack.token is defined and chef_run|success)
    tags:
    - slack
    - chef
    - chef_slack
