---
# TODO: assertion+
- assert: { that: "(deploy.dest is defined and deploy.dest is not none and deploy.dest | trim != '')" }

- name: Create temporary directory
  file:
    owner: "{{ ansible_user }}"
    path: "{{ chef.tmp_dir }}"
    state: directory
  become: True
  tags: ['deploy', 'chef', 'chef_config']

- name: Fetch installation script for Chef
  get_url:
    url: https://www.opscode.com/chef/install.sh
    dest: "{{ chef.tmp_dir }}/install.sh"
  register: chef_fetch
  tags: ['deploy', 'chef', 'chef_fetch', chef_install']

- name: Create directories for Chef
  file:
    path: "{{ dir }}"
    state: directory
    owner: "{{ ansible_user }}"
  with_items:
  - "{{ chef.config_dir }}"
  - "{{ chef.file_cache_path }}"
  loop_control:
    loop_var: dir
  become: True
  tags: ['deploy', 'chef', 'chef_config']

- name: Install Chef
  command: "/usr/bin/env bash {{ chef.tmp_dir }}/install.sh -d {{ chef.tmp_dir }}"
  register: chef_install
  become: True
  retries: 1
  delay: 10
  changed_when: "chef_install.stdout.find('checksum compare succeeded, using existing file') != -1"
  when: hostvars[ansible_hostname]['have_chef'] is undefined
  tags: ['deploy', 'chef', 'chef_install']

# TODO: store and compare timestamp
- set_fact:
    have_chef: True
  when: chef_install|changed
  tags: ['deploy', 'chef', 'chef_install', 'set_fact']

- name: Create Chef configuration file
  template:
    src: "chef/solo.rb.j2"
    dest: "{{ chef.config_dir|default('/etc/chef') }}/solo.rb"
    mode: 0644
  become: True
  tags: ['deploy', 'chef', 'chef_config']

- name: Adjust permissions
  file:
    path: "{{ deploy.dest }}"
    recurse: True
    owner: "{{ ansible_user }}"
    mode: 0755
    state: directory
  become: True
  tags: ['deploy', 'chef', 'chef_permissions']

- name: Gather Chef version
  command: chef-client -v
  register: chef_version
  tags: ['deploy', 'chef', 'chef_version']

- set_fact:
    chef_version: chef_version.stdout
    when: chef_version|success
  tags: ['deploy', 'chef', 'chef_version', 'set_fact']

# TODO: compare versions

- name: Gather OHAI Facts
  setup:
    filter: ohai
  no_log: True
  register: chef_ohai
  tags: ['deploy', 'chef', 'chef_ohai']

- set_fact:
    chef_ohai: chef_ohai.stdout
    when: chef_ohai|success
  tags: ['deploy', 'chef', 'chef_ohai', 'set_fact']
